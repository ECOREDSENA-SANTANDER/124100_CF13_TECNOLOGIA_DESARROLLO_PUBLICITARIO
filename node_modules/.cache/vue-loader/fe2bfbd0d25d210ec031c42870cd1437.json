{"remainingRequest":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/src/views/Tema4.vue?vue&type=template&id=45584c0a&lang=pug","dependencies":[{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/src/views/Tema4.vue","mtime":1740579777397},{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/124100_CF13_TECNOLOGIA_DESARROLLO_PUBLICITARIO/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}